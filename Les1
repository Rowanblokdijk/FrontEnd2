WERKOPDRACHTEN LES 1

#####*1: Context (20 minuten)*
---
**Opdracht 1.1: No jQuery**  
In 2tallen: Noteer voor- en nadelen van jQuery (minimaal 5 van ieder)

Voordelen:
1. Crossbrowser functies
2. Ingewikkelde functies zijn versimpeld 
3. Grote community
4. Handige pre-fabs: Ajax calls, animaties
5. DOM selecties zijn makkelijker uit te voeren

Nadelen:
1. Kost veel rekenkracht, dus batterij sneller leeg
2. Je leert/begrijpt Javascript minder goed
3. Kwaliteit van de code vaak slechter
4. jQuery library is erg groot, maakt je website trager
5. Je schrijft snel inefficient met jQuery


**Opdracht 1.2: Functionaliteiten jQuery**  
Noem de belangrijkste functionaliteiten van jQuery (minimaal 5)
1. Animaties & effecten maken
2. CSS aanpassen
3. Ondersteunt AJAX
4. Veel handige plugins beschikbaar
5. DOM selecties maken

**Opdracht 1.3: Micro libraries**  
Zoek op http://microjs.org naar libraries voor elke van de functionaliteiten gevonden bij opdracht 1.2 
(deel jQuery op in verschillende micro libs). Kies voor elke functie een micro library (vergelijk en beoordeel op kwaliteit)
1. Vivi
2. picoCSS
3. Zepto
4. -
5. TinyDOM



#####*2: Objects (30 minuten)*
---
**Opdracht 2.1: Constructor object**  
Maak met een object constructor een ‘Persoon’-object aan met de property ‘name’ en de method ‘speak’. 
En maak een nieuwe instantie aan van dit object waarbij je de naam ‘Bob’ meegeeft als parameter van het object 

function Persoon(name){
	this.speak = function (){
		console.log("Persoon zegt: ik heet" + name );
	};
}

var bob = new Persoon(Bob);


**Opdracht 2.2: Prototype**  
Voeg de methods ‘walk’ en ‘eat’ toe aan het ‘Persoon’-object met de prototype function van het object

Persoon.prototype.walk = function (){
		console.log("Persoon loopt");
	};
	
Persoon.prototype.eat = function (){
		console.log("Persoon eet");
	};



**Opdracht 2.3: Object Literal**  
Maak nu hetzelfde object, met dezelfde properties en methods aan met een object literal

var Persoon = {
	name:'Bob';
	speak: function (){
		console.log("Persoon zegt: ik heet" + name );	
	};
	walk: function (){
		console.log("Persoon loopt");	
	};
	eat: function (){
		console.log("Persoon eet");
	};
}



#####*3: Scope (30 minuten)*
---
**Opdracht 3.1: Local Scope**  
Maak met behulp van een function een local scope aan en definieer in deze local scope de variables ‘iterator’, ‘max’ en ‘min’ aan

(function (){
	var iterator = 2;
	var max = 100;
	var min = 1;
})();

**Opdracht 3.2: Global Scope**  
Maak dezelfde variables nu ook aan in de global scope

var iterator = 2;
var max = 100;
var min = 1;

**Opdracht 3.3: Closure**  
Leg uit wat een closure is en maak een code voorbeeld

De binnenste functie kan gebruik maken van de argumenten en variabelen van de buitenste functie, 
terwijl de buitenste functie de argumenten en variabelen van de binnesnte functie niet kan gebruiken. 

function buiten(x) {
   function binnen(y) {
      return x + y;
   }
   return binnen;
}
fn_binnen = buiten(3); 
result = fn_binnen(5); // returns 8

#####*4: Refactoring GEO Script (30 minuten)*
---
**Opdracht 4.1: Breakdown script**
URL: https://github.com/ju5tu5/cmdgeo/blob/master/src/cmdgeo-0.1.js      
Het GEO script is niet gestructureerd en bestaat uit losse (globale) variabelen en functies. Maak op papier een breakdown van het Geo Script. 
schrijf de verschillende functionaliteiten op en leid er objecten met properties en methods uit af

Functionaliteiten:
- Events
- GPS
- Google Maps
- Debug


**Opdracht 4.2: Create objects**    
Werk de breakdown uit in JavaScript  

/***
* cmdaan.js
*	Bevat functies voor CMDAan stijl geolocatie welke uitgelegd
*	zijn tijdens het techniek college in week 5.
*
*	Author: J.P. Sturkenboom <j.p.sturkenboom@hva.nl>
* 	Credit: Dive into html5, geo.js, Nicholas C. Zakas
*
*	Copyleft 2012, all wrongs reversed.
*/

// Variable declaration
function(){
	var SANDBOX = "SANDBOX";
	var LINEAIR = "LINEAIR";
	var GPS_AVAILABLE = 'GPS_AVAILABLE';
	var GPS_UNAVAILABLE = 'GPS_UNAVAILABLE';
	var POSITION_UPDATED = 'POSITION_UPDATED';
	var REFRESH_RATE = 1000;
	var currentPosition = currentPositionMarker = customDebugging = debugId = map = interval =intervalCounter = updateMap = false;
	var locatieRij = markerRij = [];
}

// Event functies - bron: http://www.nczonline.net/blog/2010/03/09/custom-events-in-javascript/ Copyright (c) 2010 Nicholas C. Zakas. All rights reserved. MIT License
// Gebruik: ET.addListener('foo', handleEvent); ET.fire('event_name'); ET.removeListener('foo', handleEvent);
function EventTarget(){this._listeners={}}
EventTarget.prototype={constructor:EventTarget,addListener:function(a,c){"undefined"==typeof this._listeners[a]&&(this._listeners[a]=[]);this._listeners[a].push(c)},fire:function(a){"string"==typeof a&&(a={type:a});a.target||(a.target=this);if(!a.type)throw Error("Event object missing 'type' property.");if(this._listeners[a.type]instanceof Array)for(var c=this._listeners[a.type],b=0,d=c.length;b<d;b++)c[b].call(this,a)},removeListener:function(a,c){if(this._listeners[a]instanceof Array)for(var b=
this._listeners[a],d=0,e=b.length;d<e;d++)if(b[d]===c){b.splice(d,1);break}}}; var ET = new EventTarget();

// Test of GPS beschikbaar is (via geo.js) en vuur een event af
var GPS = {
	function init(){
		debug_message("Controleer of GPS beschikbaar is...");

		ET.addListener(GPS_AVAILABLE, _start_interval);
		ET.addListener(GPS_UNAVAILABLE, function(){debug_message('GPS is niet beschikbaar.')});

		(geo_position_js.init())?ET.fire(GPS_AVAILABLE):ET.fire(GPS_UNAVAILABLE);
	}
	// Start een interval welke op basis van REFRESH_RATE de positie updated
	function _start_interval(event){
		debug_message("GPS is beschikbaar, vraag positie.");
		_update_position();
		interval = self.setInterval(_update_position, REFRESH_RATE);
		ET.addListener(POSITION_UPDATED, _check_locations);
	}
	// Vraag de huidige positie aan geo.js, stel een callback in voor het resultaat
	function _update_position(){
		intervalCounter++;
		geo_position_js.getCurrentPosition(_set_position, _geo_error_handler, {enableHighAccuracy:true});
	}
	// Callback functie voor het instellen van de huidige positie, vuurt een event af
	function _set_position(position){
		currentPosition = position;
		ET.fire("POSITION_UPDATED");
		debug_message(intervalCounter+" positie lat:"+position.coords.latitude+" long:"+position.coords.longitude);
	}
	// Controleer de locaties en verwijs naar een andere pagina als we op een locatie zijn
	function _check_locations(event){
	// Liefst buiten google maps om... maar helaas, ze hebben alle coole functies
		for (var i = 0; i < locaties.length; i++) {
			var locatie = {coords:{latitude: locaties[i][3],longitude: locaties[i][4]}};

		if(_calculate_distance(locatie, currentPosition)<locaties[i][2]){

			// Controle of we NU op die locatie zijn, zo niet gaan we naar de betreffende page
			if(window.location!=locaties[i][1] && localStorage[locaties[i][0]]=="false"){
				// Probeer local storage, als die bestaat incrementeer de locatie
				try {
					(localStorage[locaties[i][0]]=="false")?localStorage[locaties[i][0]]=1:localStorage[locaties[i][0]]++;
				} catch(error) {
					debug_message("Localstorage kan niet aangesproken worden: "+error);
				}

	// TODO: Animeer de betreffende marker

				window.location = locaties[i][1];
				debug_message("Speler is binnen een straal van "+ locaties[i][2] +" meter van "+locaties[i][0]);
				}
			}
		}
	}
	// Bereken het verchil in meters tussen twee punten
	function _calculate_distance(p1, p2){
		var pos1 = new google.maps.LatLng(p1.coords.latitude, p1.coords.longitude);
		var pos2 = new google.maps.LatLng(p2.coords.latitude, p2.coords.longitude);
		return Math.round(google.maps.geometry.spherical.computeDistanceBetween(pos1, pos2), 0);
	}
}

// GOOGLE MAPS FUNCTIES
/**
 * generate_map(myOptions, canvasId)
 *	roept op basis van meegegeven opties de google maps API aan
 *	om een kaart te genereren en plaatst deze in het HTML element
 *	wat aangeduid wordt door het meegegeven id.
 *
 *	@param myOptions:object - een object met in te stellen opties
 *		voor de aanroep van de google maps API, kijk voor een over-
 *		zicht van mogelijke opties op http://
 *	@param canvasID:string - het id van het HTML element waar de
 *		kaart in ge-rendered moet worden, <div> of <canvas>
 */
var = googleMaps {
	function generate_map(myOptions, canvasId){
    // TODO: Kan ik hier asynchroon nog de google maps api aanroepen? dit scheelt calls
	 debug_message("Genereer een Google Maps kaart en toon deze in #"+canvasId)
	 map = new google.maps.Map(document.getElementById(canvasId), myOptions);

	 var routeList = [];
	// Voeg de markers toe aan de map afhankelijk van het tourtype
	debug_message("Locaties intekenen, tourtype is: "+tourType);
	for (var i = 0; i < locaties.length; i++) {

		// Met kudos aan Tomas Harkema, probeer local storage, als het bestaat, voeg de locaties toe
		try {
			(localStorage.visited==undefined||isNumber(localStorage.visited))?localStorage[locaties[i][0]]=false:null;
		} catch (error) {
			debug_message("Localstorage kan niet aangesproken worden: "+error);
		}

	    var markerLatLng = new google.maps.LatLng(locaties[i][3], locaties[i][4]);
	  	routeList.push(markerLatLng);

	    markerRij[i] = {};
	    for (var attr in locatieMarker) {
            markerRij[i][attr] = locatieMarker[attr];
        }
	    markerRij[i].scale = locaties[i][2]/3;

	    var marker = new google.maps.Marker({
	        position: markerLatLng,
	        map: map,
	        icon: markerRij[i],
	        title: locaties[i][0]
	    });
	}
    // TODO: Kleur aanpassen op het huidige punt van de tour
	if(tourType == LINEAIR){
		// Trek lijnen tussen de punten
		debug_message("Route intekenen");
		var route = new google.maps.Polyline({
	  		clickable: false,
	  		map: map,
	  		path: routeList,
	  		strokeColor: 'Black',
	  		strokeOpacity: .6,
	  		strokeWeight: 3
	  	});

	}

	// Voeg de locatie van de persoon door
	currentPositionMarker = new google.maps.Marker({
        position: kaartOpties.center,
        map: map,
        icon: positieMarker,
        title: 'U bevindt zich hier'
    });

	// Zorg dat de kaart geupdated wordt als het POSITION_UPDATED event afgevuurd wordt
	ET.addListener(POSITION_UPDATED, update_positie);
    }

	function isNumber(n) {
	  return !isNaN(parseFloat(n)) && isFinite(n);
	}

	// Update de positie van de gebruiker op de kaart
	function update_positie(event){
		// use currentPosition to center the map
		var newPos = new google.maps.LatLng(currentPosition.coords.latitude, currentPosition.coords.longitude);
		map.setCenter(newPos);
		currentPositionMarker.setPosition(newPos);
	}
}


// FUNCTIES VOOR DEBUGGING
var = debug{
	function _geo_error_handler(code, message) {
	  	debug_message('geo.js error '+code+': '+message);
	}
	function debug_message(message){
		(customDebugging && debugId)?document.getElementById(debugId).innerHTML:console.log(message);
	}
	function set_custom_debugging(debugId){
		debugId = this.debugId;
		customDebugging = true;
	}
}
